package planner;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Scanner;

import jess.Filter;
import jess.JessException;
import jess.Rete;
import jess.Filter.ByClass;


import model.Client;
import model.Group;
import model.Holiday;
import model.MusicTaste;
import model.Person;
import model.Theme;
import data.Database;

public class Planner {
	
	private Database data;
	private Rete engine;
	
	public static void main(String[] args) {
		
		Planner plan = new Planner(args);
		
			System.out.println("################################");
			System.out.println("#   VU Knowledge engineering   #");
		    System.out.println("#    	  Planning Tool	       #");
			System.out.println("#              By              #");
			System.out.println("#     Lars, Floris en Sanne    #");
			System.out.println("################################");
			System.out.println("");

			
			boolean exit = false;
			Scanner readUserInput=new Scanner(System.in);

		while(!exit)
		{
			System.out.println("");
			System.out.println("What do you want to do: import, export, plan or quit ?");
			System.out.println("");

				
		        String command = readUserInput.nextLine();
		        
		        switch (command.toLowerCase()) {
				case "import":
					plan.importData();
					break;
				case "export":
				    plan.exportExampleClient();
					break;
				case "plan":
					plan.planGroups();
					break;
				case "quit":
				exit = true;
				break;
				
				default:
					System.out.println("Not a valid command.");
					break;
				}		        	        
		}
				
	}
	
	private void planGroups(){
		if(data.clients.isEmpty()){
			System.out.println("Import data before planning!");
		} else{
			try {
				ArrayList<Holiday> holidays = new ArrayList<Holiday>();
				holidays.addAll(CountThemesInclients(data.clients, Theme.Music));
				holidays.addAll(CountThemesInclients(data.clients, Theme.Sailing));
				holidays.addAll(CountThemesInclients(data.clients, Theme.HorseRiding));
				holidays.addAll(CountThemesInclients(data.clients, Theme.Fishing));



				engine.batch("rules.clp");
				engine.reset();
				engine.addAll(data.clients);
				engine.addAll(holidays);
				engine.run();
				
				Iterator<?> hols = engine.getObjects(new Filter.ByClass(Holiday.class));
				int count = 0;
				while(hols.hasNext())
				{
					count++;
					Holiday hol =(Holiday) hols.next();
					
					System.out.println("");
					System.out.println("********************************");
					System.out.println("  Holiday number:"+ count);
					System.out.println("  for holiday theme: " + hol.getHolidayTheme());
					System.out.println("********************************");
					
					System.out.printf("%-20s|%8s|%8s|%8s|%8s|%8s|%8s|\n",
							"Name",
							"IQ",
							"ComLVL",
							"Age",
							"MobLVL",
							"PresLVL",
							"SensLVL");
					for(int i = 0; i < (20+6*8+7); i++){
						System.out.print("-");
					}
					
					for(int i =0; i < hol.getNumberOfParticipants(); i++)
					{
						Client part = hol.getParticipant(i);
						System.out.printf("\n%-20s|%8d|%8d|%8d|%8d|%8d|%8d|",
								part.getName(),
								part.getIq(),
								part.getCommunicativeSkill(),
								part.getAge(),
								part.getMobilityLevel(),
								part.getPresenceLevel(),
								part.getSensibilityForStress());
					}
					System.out.printf("\n\n%-20s|%8d|%8d|%8d|%8d|%8d|%8d|",
							"Mean ",
							hol.calculateAverageIQ(),
							hol.calculateAverageCommunicationLvl(),
							hol.calculateAverageAge(),
							hol.calculateAverageMobilityLvl(),
							hol.calculateAveragePresencelvl(),
							hol.calculateAverageSensibility());
							
					System.out.printf("\n%-20s|%8.2f|%8.2f|%8.2f|%8.2f|%8.2f|%8.2f|",
							"St. dev. ",
							hol.calculateStdDevIQ(),
							hol.calculateStdDevComLvl(),
							hol.calculateStdDevAge(),
							hol.calculateStdDevMobLvl(),
							hol.calculateStdDevPresLvl(),
							hol.calculateStdDevSensibility());
				
					System.out.printf("\n%-20s|%8d|%8d|%8d|%8d|%8d|%8d|",
							"Least ",
							hol.leastIQ(),
							hol.leastCom(),
							hol.leastAge(),
							hol.leastMob(),
							hol.leastPres(),
							hol.leastSens());
					
					System.out.printf("\n%-20s|%8d|%8d|%8d|%8d|%8d|%8d|",
							"Most ",
							hol.mostIQ(),
							hol.mostCom(),
							hol.mostAge(),
							hol.mostMob(),
							hol.mostPres(),
							hol.mostSens());
				}

			} catch (JessException e) {
				// TODO Autogenerated catch block
				e.printStackTrace();
			}
		}
	}
	
	private ArrayList<Holiday> CountThemesInclients(ArrayList<Client> _clients, Theme _theme)
	{
		Double count = 0.0 ;
		for(int i=0; i < data.clients.size(); i++){
		
			if(_clients.get(i).getPreferredHoliday() == _theme)
			{
				count++;
			}
		}
		
		ArrayList<Holiday> h = new ArrayList<Holiday>();
		double numb = Math.ceil(count / 12);
		for(int i=0; i < numb; i++){
			Holiday temphol = new Holiday();
			temphol.setHolidayTheme(_theme);
			h.add(temphol);
		}
		return h;
	}
	
	private void importData() {
		
		System.out.println("*** Starting client import ***");
		System.out.println("");
		
		ArrayList<Client> clients = data.importClientsFromXML();
		
		 for (int i = 0; i < clients.size(); i++) {	
		 
			 System.out.println("--> Imported client: " + clients.get(i).name);
		 }
		 
		 System.out.println("");
		 System.out.println("*** client import finished ***");
	}
	
	private void exportExampleClient()
	{	
		try {
			Client client = new Client();
			client.name = "Henk";
			client.address = "verre wegstraat 3";
			client.city = "Amsterdam";
		    SimpleDateFormat formatter = new SimpleDateFormat("DD-MM-yyyy"); 
			client.birth = formatter.parse("15-09-1980");
			client.setCommunicativeSkill(4);
			client.email = "Henk@hotmail.com";
			client.setFishingSeriousness(-1);
			client.setHasAllergy(false);
			client.setHasDiet(false);
			client.setHorseRidingSkill(-1);
			client.setCarePerDay(3);
			client.setIndependenceLevel(4);
			client.insurenceNumber = "123214";
			client.setIq(75);
			client.setMobilityLevel(5);
			client.setMusicPreference(MusicTaste.Top40);
			client.setNeedsOneToOneGuidance(false);
			client.setPresenceLevel(3);
			client.setSailingIQ(-1);
			client.sex = 'm';
			client.setSocialSkill(4);
			client.telephoneNumber = "1234981423";
			client.setSensibilityForStress(5);
			client.setWeight(95);
			client.setPreferredHoliday(Theme.Music);
			client.setIsPlanned(false);
			
			data.exportClientToXML(client);		
		
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public Planner(String[] args) 
	{
		data = new Database(args[0]);
		
		engine = new Rete();
	}

}
